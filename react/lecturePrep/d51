First we tell them schedule for the code reviews, then we will introduce to them the idea of exercism using typescript.
Have both schedule for review as well as typescript exercism, one per person so that they can prepare, ensure that the class has attempted the problems beforehand.

To install react,

in the commandline

npm install -g create-react-app
You might need to use sudo

After you have done this:

create-react-app my-first-react-project --scripts-version=react-scripts-ts 
create-react-app --> syntax for the create-react-app library to start a project in react
my-first-react-project --> the name of the new project
--scripts-version=react-scripts-ts --> activates typescript with react.

React is still quite young, you may find some errors during installation, it might be the version is out of date so just try again, or look for the version you are using.

Once the installation is complete use ls -la in the directory
you can see many files and dependencies have been created, downloaded etc. From now, put npm behind you (unless you think you will ust be doing backend code....)

We use advanced package manager now. instead of node package manager

We have another tool now called yarn, yarn replaced npm.
We can use yarn as the package manager of react.

yarn start in the directory.
This servers the files that we have in our new project, it starts a simple server so that it can render the JSX into html and display it on our browser. Show them the page. Using local host. @localhost:3000
code . so you can see vs code.

It looks more similar to a backend project. you have node_modules, package.lock / package.managers.... You even have import!
But know this, this is only frontend code.
Some of the node_modules are shared between back and front end, however, what we use here is just for the frontend. 

For react, the entry point is index.tsx -- ts is actually the file name for typescript, and the x is part of the react project, so infact this file is a typescript react file.

JSX - javascript react, for the react we learn in this module, we will use typescript, instead of Javascript - so it is tsx.

react doesnt require JSX, it is a simple framework that tries to construct the DOM, its trying to construct html into javascript. 

Some people in their project used html template:


const commentBox = `<div><p>${commenter.name}</p></div>`

what if this comment box is just like html that can do this:

<commentBox name={commenter.name}></commentBox>

This would make the world of coding a lot more easier. 

React wants to develop a method to create the HTML in this way:

React.createElement('div',{

}, [
    React.createElement('p', commenter.name)
]);

They create syntax like this, but the end result is not pretty, it doesnt look or feel like HTML, so they developed a processor and created new syntax so that whenever someone types:
<div><p>${commenter.name}</p></div> into JSX
it converts it to:
React.createElement('div',{

}, [
    React.createElement('p', commenter.name)
]);

This is why we have JSX, to be converted into the react framework. 

google babeljs.io 
show them that you can convert this basic code that is generated by create react app into the code that we had above. 

class App.....

}

copy from the prefabricated code, ensure to take out any type script (public)

The Jsx, feels like writing html, however in reality, it constructs the virtual dom in JS, from our JSX code. 

In JSX you have to note that class is a reserved keyword, so class is replaced by className, the rest of the syntax is pretty much the same from html to JSX

edit the new file, by changing Welcome to React, to 'hello'
It should update automatically. We have live Reload and refresh.

Read the JSX intro then we can follow the tutorial.

Todays main focus is to install react. 


SLIDES

Demonstration of typescript exercism, hello world. 

Before we can start using typescript we need to use yarn.
sudo npm install -g yarn

yarn install

new exercism downloads:

exercism download --exercise=hello-world --track=typescript
exercism.exe download --exercise=hello-world --track=typescript


You will need to change the exercise name

the exercism, which is downloaded from the website will need to get all of its required dependencies before you can test it, so run:

yarn install

This might take a long time, this is because of babel and other dependencies

Show them the test case which looks very familiar to the test case we have previously done in js. Can we just copy and paste the work previously done in javascript? to make this work?

If you do you will see many errors! 

We must construct the class HelloWorld
with the method hello() inside, 
And we need to update the syntax that can be used by typescript.
module.export :

export HelloWorld;

look at the test cases
We have many ways to import and export objects, functions and classes. This is due to typescripts newer syntax.

Say we have two variables:

const a = 1;
const b = 2;

we can export like this:

But how can import both objects?

import {a,b} from "./"hello-world

but you also see this:

import HelloWorld from "./hello-world"
this is the default import action, (without curly braces.)
So when exporting, you need:

export default HelloWorld;

full code:
class HelloWorld {
    static hello() {
        return `Hello, World!`;
    }
}

export default HelloWorld

typescript has a file called tslint, tslint is something you might hate, prior to this module there were on real predefined rules for you when writing code, it can be messy, untidy and unkept. But starting today, we have ts-lint, its like the coding police. 
They enforce certain rules on your code before it is even run, show the tslint file

Try to do:
yarn test

There could be errors....

ensure that the hello method is considered a static method inside the class HelloWorld.

Also highlight the error in the test case, expected 1 got 0
then when adding name into the static method hello, show them t-s lints other error about name not being used and it not having an implict type. 
We can use any, which is bad practice, but we know we are being passed a string so we define name as a string!

This solves all our problems!? 
NO of course not, go highlight the fact that now the first test case is failing due to getting an argument when it should not be.

I can fix this by naming the argument passed into the function optional, which is just putting a ? after name before the :

This shows us the benefits of using typescript, it will tell us the problem quickly and this will speed up our development.

ending code should look like this :

class HelloWorld {
    static hello(name: string = 'World') {
        return `Hello, ${name}!`;
    }
}

export default HelloWorld;


for the upcoming exercism try to follow this method of reading the errors and fixing them, you may want to look at the documentation of typescript to fully understand what is happening. 

the exercism, is converting the exercism from js into typescript, how do you convert it from one to the other!
3 exercism a day?

Last thing to note
If you enjoy doing typescript, if you want to do everything in typescript, as plain javascript was too difficult and you forgot all your method names etc
Your oppertunity is now! 

This is if you are looking to write your whole backend in typescript. 

in a new directory
mkdir ts-express
cd ts-express

npm init -y

usual method to start the backend..
Now we install a couple of more dependencies

npm install ts-node typescript @types/node
you can also use yarn to do this.
yarn is the replacement of npm, it has online caching and is faster.
syntax is different
instead of npm install use:
yarn add ts-node typescript @types/node

Once this is all installed we have set up a couple of things, we installed typescript definitions in our file, we install ts-node, that converts our nodejs enviroment to a a typscript nodejs enviroment
we will still have our entry point as index.js
however inside all we have is this:

require('ts-node/register');

this upgrades our require method.
from this point, we can import typescript files.

make a file app.ts

now we can require it, require('./app')
therefore this current require is able to import the typescript written in our app.ts

we now use typescript
in the app.ts:

import * as fs from 'fs'

fs.readFile(1);
will cause an error, typescript should prompt you with what is required.

so refactor to
fs.readFile(1, (err)=>{

});

change 1 to false and an error will appear as typescript it telling you what it possible/ necessary

delete the code above, now install express
yarn add express

import * as express from 'express'

const app = express()

app.listen(8080)

This will currently throw an error in our application, as typescript will not recognise the functions inside express due to its strong static nature. We must therefore install the type definition so that we can access all the functions inside express.

Most packages that can be added using yarn will have a type definition. This type definition is like an extension pack that allows the package to be used by other languages. 

yarn add @types/express 
==> this will add the type definition, remember that you will need to install the core functions of express

now you should be able to see all the options that "app" can give you, show them in vs code.

following the example of app.listen show students 
app.get('/', (req, res) =>{
    res.redirect()
})

show them the typescript help by hovering over the ()/ waiting for vs code to suggest how to compete the function 
Press the arrows to show all the definitions before writing the 

Should we use npm or yarn?

in npm we had package.lock.json, this helps us to fix our version-ing, you will need to commit this file with the package.json, so that when you're sharing code, you can have the same experience with the right packages.
You wont need to worry about the versions of your dependencies when using a friends code.

However these json files are not very git friendly. 

So yarn helps, as they make a yarn.lock, which is formatted differntly to our json files, go inside the file, show them the lack of curly braces, the omission of these makes this more git friendly

conflict can arise, but its less frequent than in npm installtions.

If you see a project that contains yarn.lock always use yarn install. as it is faster. Moreover if you use npm install then you make a package-lock.json, if you see a project with both this means that the developer has made a mistake as you do not want both.

if you dont see any yarn lock or package-lock then you should use yarn as it is faster etc. But if you see a package-lock.json. Then you should use npm install 

Weekly Assignment.
Sharelink
Show them a working example of the sharelink assignment. So they know what to expect.
show them adding a link and then searching for a link etc.
you need to be able to add links, add tags to that link, it should use local storage to persist, there should be a search function, but no edit.

