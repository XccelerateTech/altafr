Goto cms passport.
mkdir new project
cd into it 

first we need npm init -y

npm install passport passport-local
first we need passport for user authentication and handling the requests, then we need the passport-local, which is the local strategy that we use.
npm install express body-parser
we will need this to create the web server.

we now have our package.lock/json.

const express = require('express');
const bodyParser = require('body-parser');

const app = express()

app.use(bodyParser.urlencoded({extended: false}))

app.listen(3000)

This is our basic server.
We want user login.
in reality we will use a database to store our users, here I will demonstrate with an array of users.

add the user array before body parser is used.

const users = [
    {
        id: 0,
        email: 'tom@tom.com',
        password: 'tom'
    },{
         id: 1,
        email: 'peter@peter.com',
        password: 'peter'
    }
]

then we need passport. below the users add

const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;

//here we are using passport as the middleware to express.

app.use(passport.initialize());
app.use(passport.session());

//here we define the strategy that passport should use. 
'local-login' is a place holder, we can change the name.

    passport.use('local-login', new LocalStrategy(
        async (email, password, done) => {
            try{

                //here we still have to check our database ourselves for the user. in this case we wont need the async as its just a user array - take away async
                email and password given by local strategy - this is unlike HSBC which requires two passwords. Therefore you would be unable to use this local strategy.

                in the try block add over the knex.
                let userResult = users.filter(user => user.email === email)also userResult.length==0


                let users = await knex('users').where({email:email});
                if (users.length == 0) {
                    return done(null, false, { message: 'Incorrect credentials.' });
                }
                let user = users[0];
                if (user.password === password) {
                    return done(null, user);
                }else{
                    return done(null, false, { message: 'Incorrect credentials.' });
                }
            }catch(err){
                return done(err);
            }
        }
    ));

    //here we have the callback style, it should always need a database. if we cannot login we give them a message and pass false.
    on the otherhand, if we succeed we pass the user in. 

   // Now we can implement below. below the passport logic
    we are storing the information of the user.id in the session store.
    Where does this user come from? it comes form te local-strategy that has been set up.

 passport.serializeUser((user, done) => {
        done(null, user.id);
    });

    before we are able to finish I will need to add something before passport, we need to initalize the session. this is because passport does not handle the session.

    if we dont know how to use stuff or forget, look at the NodeJS example.
    they have the full example of knex and passport. - as we know we have seperated the modules into differnt files, so its hard to find which files are requiired by one another. when youre used to it, it helps, but before this it doesnt help at all!

    now npm install express-session
    then require at the top of the package
    const expressSession = require('express-session')

    then add app.use(expressSession({secret: 'superSecret'})); before passport 
    now we have got expressSession activated. 
    now run through the code from top to bottom.

    we have now defined the strategy but we dont know where to send the request.

    so to route the user in the correct place:

    app.get('/login', (req, res)=>{
        res.sendFile(__dirname + '/login.html')
    });


    inside a new file called login.html add
    <form action="/login" method="post">
    <div>
        <label>email:</label>
        <input type="text" name="username"/>
    </div>
    <div>
        <label>Password:</label>
        <input type="password" name="password"/>
    </div>
    <div>
        <input type="submit" value="Log In"/>
    </div>
</form>

   this does not concern passport.
   but what does concern passport and goes into our index.js
   (below our get request we have)

    app.post('/login', passport.authenticate('local-login', {
        successRedirect: '/',
        failureRedirect: '/error'
    }));

    in our get request we have our own handleer which tells our app what to do with the request, it tells it to respond.
    but the post request, we have deligated this job to passport
    how does passport authenticate? we use the name of the strategy defined above ('local-login') if success goto home page, otherwise error.

    add this above our first get request.
    app.get('/', (req, res)=>{
        res.send('YES successful login');
    });

    app.get('/error', (req, res)=>{
        res.send('You have failed....');
    });

now we can try to run the program. 
now we should be able to add usename and password.

now we have a fail as we were not finished deserialize user.......
the authentication though is working which is a good thing.


Go back to slides.show them the authentication slide, we have done all of this.

we have already implemented authentiaction. now we need to use and implement deserialize. 
add this code below serialize user.


    passport.deserializeUser((id, done) => {
        let userResult = users.filter(user=> user.id === id);
        if (userResult.length == 0) {
            return done(new Error(`Wrong user id ${id}`));
        }
        let user = userResult[0];
        return done(null, user);
    });
};

place this code before our app.get routes etc.

now we should be able to pass req.user into the res.send at app.get
res.send(''...+ req.user.email);

all we have done is add the deserialze user 

in deserialize user we use similar methods to what we implemented in serialze user, we need to user an object USERRESULt = users.filter etc.
if there are non then something has gone wrong. this can happen, so we should check it every time.


we should end with a successful login. 

on the CMS we have one more thing that passport can do for us.
We can also create our own middleware to check if we have logged in or not?

Goto cms show them the code for isLoggedIn
We check to see if the user is authenticated, if it is then we can move to the next page.
Otherwise we send them the login page and perhaps na error message.

if we open the app in another incognito browser you will get an error as the session has not been passed and the email is therefore undefined.

To fix this, we can add in this additional middleware to check if we are logged in or not. 

add this code:

 function isLoggedIn(req, res, next) {
        if (req.isAuthenticated()) {
            return next();
        }

        res.redirect('/login');
    }

before our routes.
then add isLoggedIn as middleware after app.get('/'), between the path and the handler separting them by commas.
This should stop people from accessing the page

Now when we try to goto the localhost it should redirect the user to the login page, until that user is logged in and verified as a user.

SLIDES

Facebook login from scratch.
goto developers.facebook.com - now we need to register an app so we can intergrate facebook login and the add.
login to facebook and create a new app.

now we have the app created, we need the app id 
if you recall what we talked about before, we will need the user to goto facebok and verify he is a user before we are able to register him as a user.
We must register the app on facebook so that when the user makes a request we know it is this application that is asking for an auth token

after cambridge analytica, restrictions have been tightened. All apps that go live and to be useable to friends, we need to change the status in dev to be on as well as add some more information about our application.
If we want more information like photos friendlists etc, they might require manual review. 
We would need to submit applications to facebook, facebook staff will then manually see if we are using the photos for immoral purposes then we might be rejected.

now we can click facebook login app.
now we goto www

our link should be the link which is associated to our example.
http://localhost:3000
goto passport example (with local strategy)

go next next next, right now we dont have an sdk.

goto facebook login settings
highlight the valid oauth URL

we talked about the flow before, our application will ask the user to goto facebook to authenticate their login, after this once they click yes, they should be redirected to our website.
this is defined by the routes we can define.

we want to put the localhost:3000/auth/facebook/callback

now we add a facebook strategy.

we add this code below the LocalStrategy

passport.use('facebook', new FacebookStrategy({
        clientID: process.env.FACEBOOK_ID,
        clientSecret: process.env.FACEBOOK_CLIENT_SECRET,
        callbackURL: `/auth/facebook/callback`
    },(accessToken, refreshToken, profile, cb)=>{
            return cb(null,{profile:profile,accessToken:accessToken});
        }
    )); 

    also add the callback link into the routes.

      app.get("/auth/facebook/callback",passport.authenticate('facebook',{
        failureRedirect: "/"
    }),(req,res)=>res.redirect('/'));

    once it hits this link we will ask passport to do the things for us, like store the user into a session.


    https is needed for all redirection. This is facebook.
    follow the cms for this. grab the code and copy into ubuntu
    once it is finished we should have two new files.
    localhost.key and localhost.crt
    key, this is the secret file to allow our app to encrypt all traffic into and out of our application. If people get this key they would be able to pretend to be your server. 
    the crt, if you encrypt using the key you should be able to use the crt to verify you did this.


    now we comment out app.listen
    we must now prepare the options.
    we will also need our libraries.
    const https = require('https');
    const fs = require('fs');

    const options = {
  cert: fs.readFileSync('./localhost.crt'),
  key: fs.readFileSync('./localhost.key')
};

fs to read our key and crt
https is the server.

instead of app.listen
https.createServer(options, app).listen(3000);

before we can run the server we will need to get the passport-facebook strategy
npm install passport-facebook

add: below the local login.
const FacebookStrategy = require('passport-facebook').Strategy;

we will also need to set up our .env, with the facebook app id and other options.
clientID is the appid from the facebook developers site.
secret is found in settings basic.
app secret, we can get after the password.
this app secret is very important, if it is leaked people can pretend to be your application and essentially steal data or do malicious things

now we should be able to run the server.
remember that you are https:// now.

it is not secure as it is a selfsigned cert.
If you want to sign your own cert, we can check manually trust your certificate.
put the cert into the key chain for mac
then in trust we can say always trust.
when we relaunch the website we should see secure.

We cant do this for every single PC using our application so we teach you how to use a third party to trust this certificate.

now we are running the server of https we can go back to the developers.facebook.com and goto our app and update our valid OAuth redirect URL

https://localhost:3000/auth/facebook/callback

now we need add the route to send the user to facebook to authenticate with thier user name and password.

add beloew app.get('/err')

 app.get("/auth/facebook",passport.authenticate('facebook',{
        scope: ['user_friends', 'manage_pages'] 
    }));

    now in login.html

    add 

    <a href='/auth/facebook'>Login Via Facebook</a>

    refresh server and reload page.
    when you click on it it should redirect you to facebook, and there will probably be an error as our app has not been reviewed.
    Our application is not live, so only the app creator can see this login page.
    accept etc.

    might throw and error 
    passport.serializeUser stores the user into the session store. if the user makes multiple requests to our server then we use the session to verify these users.
    req.user.email.
    the user here comes from our local strategy we are done with authenticating the user we serialise the user and store the id in the session

    for facebook login we still have a callbacl.
    change cb to done
    but this time, we are getting the accessToken, profile and refresh token... which is differnt to our user.id
    this whole object is passed as user. 
    So we need to find out where the user has been logged in via facebook before
    if not create the user in our db with facebook id.
    if yes then return that user. 

    how can we do this?
    
    lets just use the array for now. database will be different.

    let userResult = users.filter(user=> user.facebookID === profile.id)
    if(userResult.length ==0){
        let user ={
            id: users.length ++,
            facebookId: profile.id,
            email: profile.displayName,
            accessToken: accessToken
             (in a real database it will auto increment but as we are using an array we need to handle this ourselves.)
        }
        users.push(user)
        done(null, user); add the user to the call back


    } else {
        done(null, userResult[0]) //just return the user if it is there.
    }
    add this above the return done(used to be cb)(null, {profile....}) ==> wont be needed any more.

with this in mind we are doing this all int he facebookStratgy 

    when we try to login again then the profile object should have stored the facebook id and all the information that we would get from this profile.
    We have the facebook id and user name.
    If one day you have a super larger website and your very successful then you might not want to store the facebook id as it is very long.

this is the only time we can grab the accessToken which we might need to send information to someones wall etc.

Redis Session.

if we use socket.io the session is seperated from passport.
goto d38 slides.

install socket.io

npm install socket.io in the repo

it is similar to how we implemented it before, but this time we are using https.

we can tell through common patterning we can set up socket.io - compare to the cms on socket.io require.

at the bottom of index.js

const server = https.createServer(options, app);
const io = require('socket.io')(server);
server.listen(3000)

next step 

in 
app.get('/', isLoggedIn, (req, res)=>{
    instead of sending a message of the secret and user name

    res.sendFile(__dirname + '/index.html')
})

then below const.io before the server.listen add:
io.on('connection', (socket) => {
    console.log('a user connected to the socket');
});

copy and paste the index.html into the repo
into the index.
  $(function () {
    var socket = io();
    $('form').submit(function(){
      socket.emit('chat message', $('#m').val());
      $('#m').val('');
      return false;
    });
    //insert here
  });

add final versions of socket.io into the index.html

then into the index.js

io.on('connection', function(socket){
  socket.on('chat message', function(msg){
    console.log('message: ' + msg);
  });
});

replace the last io.on('connection..)

then into the index.html add

 socket.on('chat message', function(msg){
      $('#messages').append($('<li>').text(msg));
    });

    make sure there is only one declaration of socket

    now we can try to run the program again.

    right now we dont have a persistent session store so we will have to log in again - in a new tab
    keep the old one connected to the socket before restarting..

    we should be able to use both.
    meaning that this is the way into your website, they connect straight to the socket, by passing the authentication.

    another issue is that we do not have any information about the user.
    I cant use socket.user

    how can we tell who sent the messages?
    back to slides.


Installing redis!!!!!=====1=1=1=1=11=

npm install connect-redis

we then set up the redis client.

after other requires at the top.

const redis  = require('redis');
const RedisStore = require('connect-redis')(expressSession);
const socketIOSession = require("socket.io.session");



const redisClient = redis.createClient({
    host : 'localhost',
    port : 6379
});


then we make a redis store previous we didnt do this, and we will therefore need to install another package.
 
 npm install socket.io.session
there is also a socket.io-session this is bad do not use it.

now comment out app.use(expressSession)

and add this below users.

we are creating a session store.
const sessionStore = new RedisStore({
        client: redisClient,
        unset: "destroy"
    });

    then add the settings
     const settings = {
        store: sessionStore,
        secret: "supersecret",
        cookie: { "path": '/', "httpOnly": true, "secure": false,  "maxAge": null }
    }

    use the same secret used in the expressSession
then add this near bodyParser

    app.use(expressSession(settings));


add this after we get socket.io
    io.use(socketIOSession(settings).parser);

    now both express and socket.io are using the same way to access the session store. so they can both access the things that passport has stored.


    then
io.use(socketIOSession(settings).parser); //(below this)
io.use((socket, next)=>{
            if(!socket.session.passport){
                socket.disconnect();
            }else{
                next();
            }
        });

        this is middleware so that when socket is started it is also bundled with the session store.

now it should work.
once you log in start the debugger and you should be able to see the raw session with all of the information passport is storing in our session
user:2 passport.user is the thing we put in the serialize user.

now we need to do something more.

we should refactor deserializeUser
to the code below.

const deserializeUser = ((id, done) => {
        let userResult = users.filter(user=> user.id === id});
        if (userResult.length == 0) {
            return done(new Error(`Wrong user id ${id}`));
        }
        let user = userResult[0];
        return done(null, user);
    });
};

 passport.deserializeUser(deserializeUser);

 this is because this deserializeUser method should only be used by passport.
 no other modules should use it, this user id is only stored by passport and only used with passport.

 but now that we have socket.io we want to share this id. 
 we have stored it as a variable so now we can invoke it in socket.io


 add:
 after the else and before the next();
put the next inside...

 deserializeUser(socket.session.passport.user, (err, user)=>{
     socket.user = user;
     next();
 });

 now longer some user. we can use.
 + socket.user.email + in our console.log

 now we can know who is sending the messages.

 when we log in if it fails, goto redis, type keys * if there is a session delete it.
 del sess...

 now we should be able to login properly.
 
 now we should be able to see which users are sending thing, the chatroom is now more meaning ful.
 we can even add the name before the mesages.
 in 
 io.emit('chat message', socket.user.email + ' : ' + msg);

clear redis with flushall

connect with two differnt users?


you can do more fancy things 
in index.js

in the if(!socket.session.passport){
socket.emit('unauthorized')
socket.disconnect();
}

in index.html
after socket.on('chat message')...

socket.on('unauthorized', function () {
    location.href = '/login';
})

this will redirect the user back to the login page if they are not meant to be there.

if you want the profile email, it is required that you also add profileFields:[‘email’] to the strategy